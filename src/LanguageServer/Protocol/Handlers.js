import { NotificationType0 } from "vscode-jsonrpc";
let registerHandler = (registerF) => (f) => () => registerF((x) => f(x)());
let registerHandler0 = (registerF) => (f) => () => registerF(f);
let registerNotificationHandler = (registerF) => (f) => () => registerF((x) => f(x)());
let registerNotificationHandler0 = (registerF) => (f) => () => registerF(f);
export const onDefinition = (conn) => registerHandler(conn.onDefinition);
export const onCompletion = (conn) => registerHandler(conn.onCompletion);
export const onCompletionResolve = (conn) => registerHandler(conn.onCompletionResolve);
export const onHover = (conn) => registerHandler(conn.onHover);
export const onDocumentSymbol = (conn) => registerHandler(conn.onDocumentSymbol);
export const onWorkspaceSymbol = (conn) => registerHandler(conn.onWorkspaceSymbol);
export const onReferences = (conn) => registerHandler(conn.onReferences);
export const onCodeAction = (conn) => registerHandler(conn.onCodeAction);
export const onCodeLens = (conn) => registerHandler(conn.onCodeLens);
export const onFoldingRanges = (conn) => registerHandler(conn.onFoldingRanges);
export const onDocumentFormatting = (conn) => registerHandler(conn.onDocumentFormatting);
export const onPrepareRename = (conn) => registerHandler(conn.onPrepareRename);
export const onRenameRequest = (conn) => registerHandler(conn.onRenameRequest);
export const onDidChangeConfiguration = (conn) => registerNotificationHandler(conn.onDidChangeConfiguration);
export const publishDiagnostics = (conn) => (params) => () => conn.sendDiagnostics(params);
export const applyEditImpl = (conn) => (edit) => () => conn.workspace.applyEdit(edit).then((x) => x.applied);
export const sendDiagnosticsBegin = (conn) => () => conn.sendNotification(new NotificationType0("textDocument/diagnosticsBegin"));
export const sendDiagnosticsEnd = (conn) => () => conn.sendNotification(new NotificationType0("textDocument/diagnosticsEnd"));
export const sendCleanBegin = (conn) => () => conn.sendNotification(new NotificationType0("textDocument/cleanBegin"));
export const sendCleanEnd = (conn) => () => conn.sendNotification(new NotificationType0("textDocument/cleanEnd"));
export const onExecuteCommand = (conn) => registerHandler(conn.onExecuteCommand);
export const onDidChangeWatchedFiles = (conn) => registerNotificationHandler(conn.onDidChangeWatchedFiles);
export const onExit = (conn) => registerNotificationHandler0(conn.onExit);
export const onShutdown = (conn) => registerHandler0(conn.onShutdown);
